{"version":3,"sources":["webpack://[name]/./src/core/plugins/oas3/components/request-body.jsx"],"names":["getDefaultRequestBodyValue","requestBody","mediaType","activeExamplesKey","mediaTypeValue","getIn","schema","get","toJS","example","undefined","currentExamplesValue","stringify","getSampleSchema","includeWriteOnly","RequestBody","requestBodyValue","requestBodyInclusionSetting","requestBodyErrors","getComponent","getConfigs","specSelectors","fn","contentType","isExecute","specPath","onChange","onChangeIncludeEmpty","updateActiveExamplesKey","authorized","handleFile","e","target","files","setIsIncludedOptions","key","options","shouldDispatchInit","defaultValue","currentInclusion","Markdown","ModelExample","RequestBodyEditor","HighlightCode","ExamplesSelectValueRetainer","Example","ParameterIncludeEmpty","showCommonExtensions","requestBodyDescription","requestBodyContent","OrderedMap","keySeq","first","schemaForMediaType","examplesForMediaType","handleExamplesSelect","getValue","List","isList","size","isObjectContent","indexOf","Input","replace","JsonSchemaForm","ParameterExt","bodyProperties","Map","isMap","map","prop","commonExt","getCommonExtensions","required","includes","type","format","description","currentValue","currentErrors","initialValue","isFile","entrySeq","v","value","isEmptyValue","push"],"mappings":"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","file":"swagger-ui-bundle.170d773b1fb388baaafe.hot-update.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport ImPropTypes from \"react-immutable-proptypes\"\r\nimport { Map, OrderedMap, List, fromJS } from \"immutable\"\r\nimport { getCommonExtensions, getSampleSchema, stringify, isEmptyValue, isJSONObject, parseExample } from \"core/utils\"\r\nimport { useEffect } from \"react\"\r\n\r\nfunction getDefaultRequestBodyValue(requestBody, mediaType, activeExamplesKey) {\r\n  let mediaTypeValue = requestBody.getIn([\"content\", mediaType])\r\n  let schema = mediaTypeValue.get(\"schema\").toJS()\r\n  let example =\r\n    mediaTypeValue.get(\"example\") !== undefined\r\n      ? mediaTypeValue.get(\"example\")\r\n      : null\r\n  let currentExamplesValue = mediaTypeValue.getIn([\r\n    \"examples\",\r\n    activeExamplesKey,\r\n    \"value\"\r\n  ])\r\n\r\n  if (mediaTypeValue.get(\"examples\")) {\r\n    // the media type DOES have examples\r\n    return stringify(currentExamplesValue) || \"\"\r\n  } else {\r\n    // the media type DOES NOT have examples\r\n    return stringify(\r\n      example ||\r\n        getSampleSchema(schema, mediaType, {\r\n          includeWriteOnly: true\r\n        }) ||\r\n        \"\"\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nconst RequestBody = ({\r\n  requestBody,\r\n  requestBodyValue,\r\n  requestBodyInclusionSetting,\r\n  requestBodyErrors,\r\n  getComponent,\r\n  getConfigs,\r\n  specSelectors,\r\n  fn,\r\n  contentType,\r\n  isExecute,\r\n  specPath,\r\n  onChange,\r\n  onChangeIncludeEmpty,\r\n  activeExamplesKey,\r\n  updateActiveExamplesKey,\r\n  authorized\r\n}) => {\r\n  const handleFile = (e) => {\r\n    onChange(e.target.files[0])\r\n  }\r\n  const setIsIncludedOptions = (key) => {\r\n    let options = {\r\n      key,\r\n      shouldDispatchInit: false,\r\n      defaultValue: true\r\n    }\r\n    let currentInclusion = requestBodyInclusionSetting.get(key, \"no value\")\r\n    if (currentInclusion === \"no value\") {\r\n      options.shouldDispatchInit = true\r\n      // future: can get/set defaultValue from a config setting\r\n    }\r\n    return options\r\n  }\r\n\r\n  const Markdown = getComponent(\"Markdown\", true)\r\n  const ModelExample = getComponent(\"modelExample\")\r\n  const RequestBodyEditor = getComponent(\"RequestBodyEditor\")\r\n  const HighlightCode = getComponent(\"highlightCode\")\r\n  const ExamplesSelectValueRetainer = getComponent(\"ExamplesSelectValueRetainer\")\r\n  const Example = getComponent(\"Example\")\r\n  const ParameterIncludeEmpty = getComponent(\"ParameterIncludeEmpty\")\r\n\r\n  const { showCommonExtensions } = getConfigs()\r\n\r\n  const requestBodyDescription = (requestBody && requestBody.get(\"description\")) || null\r\n  const requestBodyContent = (requestBody && requestBody.get(\"content\")) || new OrderedMap()\r\n  contentType = contentType || requestBodyContent.keySeq().first() || \"\"\r\n\r\n  const mediaTypeValue = requestBodyContent.get(contentType, OrderedMap())\r\n  const schemaForMediaType = mediaTypeValue.get(\"schema\", OrderedMap())\r\n  const examplesForMediaType = mediaTypeValue.get(\"examples\", null)\r\n\r\n  const handleExamplesSelect = (key /*, { isSyntheticChange } */) => {\r\n    updateActiveExamplesKey(key)\r\n  }\r\n\r\n  const getValue = () => {\r\n    return authorized && authorized.getIn([\"API Key\", \"value\"])\r\n  }\r\n\r\n  requestBodyErrors = List.isList(requestBodyErrors) ? requestBodyErrors : List()\r\n  \r\n  if(!mediaTypeValue.size) {\r\n    return null\r\n  }\r\n\r\n  const isObjectContent = mediaTypeValue.getIn([\"schema\", \"type\"]) === \"object\"\r\n\r\n  if(\r\n    contentType === \"application/octet-stream\"\r\n    || contentType.indexOf(\"image/\") === 0\r\n    || contentType.indexOf(\"audio/\") === 0\r\n    || contentType.indexOf(\"video/\") === 0\r\n  ) {\r\n    const Input = getComponent(\"Input\")\r\n\r\n    if(!isExecute) {\r\n      return <i>\r\n        Example values are not available for <code>application/octet-stream</code> media types.\r\n      </i>\r\n    }\r\n\r\n    return <Input type={\"file\"} onChange={handleFile} />\r\n  }\r\n\r\n  if(requestBodyValue != null && getValue() != undefined) {\r\n    requestBodyValue = requestBodyValue.replace('userAccessKeyPlaceholder', getValue(activeExamplesKey))\r\n  }\r\n\r\n  if (\r\n    isObjectContent &&\r\n    (\r\n      contentType === \"application/x-www-form-urlencoded\" ||\r\n      contentType.indexOf(\"multipart/\") === 0\r\n    ) &&\r\n    schemaForMediaType.get(\"properties\", OrderedMap()).size > 0\r\n  ) {\r\n    const JsonSchemaForm = getComponent(\"JsonSchemaForm\")\r\n    const ParameterExt = getComponent(\"ParameterExt\")\r\n    const bodyProperties = schemaForMediaType.get(\"properties\", OrderedMap())\r\n    requestBodyValue = Map.isMap(requestBodyValue) ? requestBodyValue : OrderedMap()\r\n   \r\n    return <div className=\"table-container\">\r\n      { requestBodyDescription &&\r\n        <Markdown source={requestBodyDescription} />\r\n      }\r\n      <table>\r\n        <tbody>\r\n          {\r\n            bodyProperties.map((prop, key) => {\r\n              let commonExt = showCommonExtensions ? getCommonExtensions(prop) : null\r\n              const required = schemaForMediaType.get(\"required\", List()).includes(key)\r\n              const type = prop.get(\"type\")\r\n              const format = prop.get(\"format\")\r\n              const description = prop.get(\"description\")\r\n              const currentValue = requestBodyValue.getIn([key, \"value\"])\r\n              const currentErrors = requestBodyValue.getIn([key, \"errors\"]) || requestBodyErrors\r\n\r\n              let initialValue = prop.get(\"default\") || prop.get(\"example\") || \"\"\r\n\r\n              if (initialValue === \"\" && type === \"object\") {\r\n                initialValue = getSampleSchema(prop, false, {\r\n                  includeWriteOnly: true\r\n                })\r\n              }\r\n\r\n              if (typeof initialValue !== \"string\" && type === \"object\") {\r\n                initialValue = stringify(initialValue)\r\n              }\r\n\r\n              const isFile = type === \"string\" && (format === \"binary\" || format === \"base64\")\r\n\r\n              return <tr key={key} className=\"parameters\" data-property-name={key}>\r\n                <td className=\"parameters-col_name\">\r\n                        <div className={required ? \"parameter__name required\" : \"parameter__name\"}>\r\n                          { key }\r\n                        </div>\r\n                        <div className=\"parameter__type\">\r\n                          { type }\r\n                          { format && <span className=\"prop-format\">(${format})</span>}\r\n                          {!showCommonExtensions || !commonExt.size ? null : commonExt.entrySeq().map(([key, v]) => <ParameterExt key={`${key}-${v}`} xKey={key} xVal={v} />)}\r\n                        </div>\r\n                        <div className=\"parameter__deprecated\">\r\n                          { prop.get(\"deprecated\") ? \"deprecated\": null }\r\n                        </div>\r\n                      </td>\r\n                      <td className=\"parameters-col_description\">\r\n                        <Markdown source={ description }></Markdown>\r\n                        {isExecute ? <div>\r\n                          <JsonSchemaForm\r\n                            fn={fn}\r\n                            dispatchInitialValue={!isFile}\r\n                            schema={prop}\r\n                            description={key}\r\n                            getComponent={getComponent}\r\n                            value={currentValue === undefined ? initialValue : currentValue}\r\n                            required = { required }\r\n                            errors = { currentErrors }\r\n                            onChange={(value) => {\r\n                              onChange(value, [key])\r\n                            }}\r\n                          />\r\n                          {required ? null : (\r\n                            <ParameterIncludeEmpty\r\n                              onChange={(value) => onChangeIncludeEmpty(key, value)}\r\n                              isIncluded={requestBodyInclusionSetting.get(key) || false}\r\n                              isIncludedOptions={setIsIncludedOptions(key)}\r\n                              isDisabled={!isEmptyValue(currentValue)}\r\n                            />\r\n                          )}\r\n                        </div> : null }\r\n                      </td>\r\n                      </tr>\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  }\r\n\r\n  return <div>\r\n    { requestBodyDescription &&\r\n      <Markdown source={requestBodyDescription} />\r\n    }\r\n    {\r\n      examplesForMediaType ? (\r\n        <ExamplesSelectValueRetainer\r\n            examples={examplesForMediaType}\r\n            currentKey={activeExamplesKey}\r\n            currentUserInputValue={requestBodyValue}\r\n            onSelect={handleExamplesSelect}\r\n            updateValue={onChange}\r\n            defaultToFirstExample={true}\r\n            getComponent={getComponent}\r\n          />\r\n      ) : null\r\n    }\r\n    {\r\n      isExecute ? (\r\n        <div>\r\n          <RequestBodyEditor\r\n            value={requestBodyValue}\r\n            errors={requestBodyErrors}\r\n            defaultValue={getDefaultRequestBodyValue(\r\n              requestBody,\r\n              contentType,\r\n              activeExamplesKey,\r\n            )}\r\n            onChange={onChange}\r\n            getComponent={getComponent}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <ModelExample\r\n          getComponent={ getComponent }\r\n          getConfigs={ getConfigs }\r\n          specSelectors={ specSelectors }\r\n          expandDepth={1}\r\n          isExecute={isExecute}\r\n          schema={mediaTypeValue.get(\"schema\")}\r\n          specPath={specPath.push(\"content\", contentType)}\r\n          example={\r\n            <HighlightCode\r\n              className=\"body-param__example\"\r\n              value={stringify(requestBodyValue) || getDefaultRequestBodyValue(\r\n                requestBody,\r\n                contentType,\r\n                activeExamplesKey,\r\n              )}\r\n            />\r\n          }\r\n          includeWriteOnly={true}\r\n        />\r\n      )\r\n    }\r\n    {\r\n       examplesForMediaType ? (\r\n        <Example\r\n          example={examplesForMediaType.get(activeExamplesKey)}\r\n          getComponent={getComponent}\r\n        />\r\n      ) : null\r\n    }\r\n  </div>\r\n}\r\n\r\nRequestBody.propTypes = {\r\n  requestBody: ImPropTypes.orderedMap.isRequired,\r\n  requestBodyValue: ImPropTypes.orderedMap.isRequired,\r\n  requestBodyInclusionSetting: ImPropTypes.Map.isRequired,\r\n  requestBodyErrors: ImPropTypes.list.isRequired,\r\n  getComponent: PropTypes.func.isRequired,\r\n  getConfigs: PropTypes.func.isRequired,\r\n  fn: PropTypes.object.isRequired,\r\n  specSelectors: PropTypes.object.isRequired,\r\n  contentType: PropTypes.string,\r\n  isExecute: PropTypes.bool.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onChangeIncludeEmpty: PropTypes.func.isRequired,\r\n  specPath: PropTypes.array.isRequired,\r\n  activeExamplesKey: PropTypes.string,\r\n  updateActiveExamplesKey: PropTypes.func,\r\n  authSelectors: PropTypes.func,\r\n}\r\n\r\nexport default RequestBody\r\n"],"sourceRoot":""}